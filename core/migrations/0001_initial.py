# Generated by Django 5.0.3 on 2024-03-31 02:33

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Comments",
            fields=[
                ("cid", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("content", models.TextField()),
            ],
            options={
                "db_table": "comments",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Courses",
            fields=[
                ("course_number", models.TextField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("prereqs", models.TextField(blank=True, null=True)),
                ("units", models.TextField(blank=True, null=True)),
                ("satisfies_area", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "courses",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Departments",
            fields=[
                ("abbr_dept", models.TextField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "departments",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FlagReviews",
            fields=[
                ("fid", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("reason", models.TextField()),
            ],
            options={
                "db_table": "flag_reviews",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MajorRequirements",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField()),
            ],
            options={
                "db_table": "major_requirements",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Majors",
            fields=[
                ("created_at", models.DateTimeField()),
                ("major_name", models.TextField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "majors",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProfessorCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "professor_course",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Reviews",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("content", models.TextField()),
                (
                    "quality",
                    models.IntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "difficulty",
                    models.IntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "grade",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("A+", "A+"),
                            ("A", "A"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B", "B"),
                            ("B-", "B-"),
                            ("C+", "C+"),
                            ("C", "C"),
                            ("C-", "C-"),
                            ("D+", "D+"),
                            ("D", "D"),
                            ("D-", "D-"),
                            ("F", "F"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "tags",
                    models.TextField(
                        blank=True,
                        choices=[
                            (1, "Easy grader"),
                            (2, "Lots of assignments"),
                            (3, "Tough grader"),
                            (4, "Funny"),
                        ],
                        null=True,
                    ),
                ),
                ("take_again", models.BooleanField()),
                (
                    "is_user_anonymous",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
            ],
            options={
                "db_table": "reviews",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Schedules",
            fields=[
                (
                    "class_number",
                    models.IntegerField(primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("section", models.TextField()),
                ("days", models.TextField()),
                ("dates", models.TextField()),
                ("times", models.TextField()),
                ("class_type", models.TextField()),
                ("course_title", models.TextField()),
                ("available_seats", models.IntegerField(blank=True, null=True)),
                ("units", models.IntegerField()),
                ("location", models.TextField(blank=True, null=True)),
                ("mode_of_instruction", models.TextField()),
                ("satisfies_area", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "schedules",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="UserReviewCritique",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("upvote", models.BooleanField()),
            ],
            options={
                "db_table": "user_review_critique",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.TextField()),
                ("email", models.TextField(unique=True)),
                ("is_professor", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "users",
                "managed": False,
            },
        ),
    ]
